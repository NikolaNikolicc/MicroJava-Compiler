program TestFull

// [Type] syntax node ERROR: 'ord' is not a type // pass
// [ConstantAssignment] syntax node ERROR: Invalid type when defining constant 'constant1' // pass
const ord constant1 = 1;

// [Type] syntax node ERROR: Type 'intt' used before declaration // pass
// [ConstantAssignment] syntax node ERROR: Invalid type when defining constant 'constant2' // pass
// [ConstantAssignment] syntax node ERROR: Name 'constant2' already defined in the current scope // pass
const intt constant2 = 2, constant2 = 4;

// [ConstantAssignment] syntax node ERROR: Incompatible types when defining constant 'constant3' // pass
const int constant3 = true;

// [ConstantAssignment] syntax node ERROR: Name 'constant4' already defined in the current scope // pass
const int constant4 = 4, constant4 = 4;

// [ConstantAssignment] syntax node ERROR: Incompatible types when defining constant 'co8' // pass
// [ConstantAssignment] syntax node ERROR: Incompatible types when defining constant 'constant9' // pass
const char cons5 = 'a', const6 = 'd', constan7 = 'A', co8 = 65, constant9 = false;

// [VariableSingle] syntax node ERROR: Name 'var2' already defined in the current scope // pass
char var1, var2, var2;

// [VariableArray] syntax node ERROR: Name 'var4' already defined in the current scope // pass
bool var3[], var4[], var4[];

// [Type] syntax node ERROR: Type 'invalidtype' used before declaration // pass
// [VariableSingle] syntax node ERROR: Name 'var5' already defined in the current scope // pass
invalidtype var5, var6[], var5;

// [ClassName] syntax node ERROR: Name 'var1' already defined in the current scope // pass
class var1 {}

class Class1
{
    // [ClassAttributeSingle] syntax node ERROR: Name 'attr1' already defined in the current scope // pass
    int attr1, attr2, attr1;

    // [Type] syntax node ERROR: Type 'boool' used before declaration // pass
    boool attr3;

    // [ClassAttributeArray] syntax node ERROR: Name 'attr4' already defined in the current scope // pass
    int attr4[], attr4[];

    // [Type] syntax node ERROR: Type 'intt' used before declaration // pass
    intt attr5[];
}

class Class2 { }

// [ClassNameExtendsBaseTypeName] syntax node ERROR: Name 'Class2' already defined in the current scope // pass
class Class2 extends Class1 { }

// [ClassNameExtendsBaseTypeName] syntax node ERROR: Base type name 'fgasga' is not defined // pass
class Class3 extends fgasga { }

// [ClassNameExtendsBaseTypeName] syntax node ERROR: Base type name 'InvalidProgramName' is neither a class nor an interface // pass
class Class4 extends InvalidProgramName { }

// [ClassNameExtendsBaseTypeName] syntax node ERROR: Base type name 'int' is neither a class nor an interface // pass
class Class5 extends int { }

class Class6
{
    int attr1, attr2;
}

class Class7 extends Class6
{
    // [ClassAttributeSingle] syntax node ERROR: Name 'attr2' already defined in the current scope // pass
    int attr2;
}

interface Interface1
{
    void interface1_method1();

    int interface1_method2(int param1, int param2)
    {
        return param1 + param2;
    }
}

// [InterfaceName] syntax node ERROR: Name 'Interface1' already defined in the current scope // pass
// [InterfaceDecl] syntax node ERROR: Name used for the interface is already defined in the current scope
interface Interface1 { }

interface Interface2 { }

interface Interface3 { }

// [ClassDecl] syntax node ERROR: Class 'Class8' does not implement all unimplemented interface methods // pass
class Class8 extends Interface1 { }

class Class9 extends Interface2 { }

class Class10 extends Interface3 { }

class Class11 extends Class10 { }

class Class12 extends Class11
{
    int attr12_1;
}

class Class13 extends Class12
{
    int attr1;
    Class12 obj12;

    {
        void method13_1()
        {
            arr1 = new int[10];
            arr1[0] = 100;

            obj12 = new Class13();
        }
    }
}

{
    // [Type] syntax node ERROR: Type 'booool' used before declaration // pass
    booool main()
    {

    }

    // [MethodName] syntax node ERROR: Name 'main' already defined in the current scope // pass
    char main(int parameter1)
    {

    }

    // [MethodName] syntax node ERROR: Name 'main' already defined in the current scope // pass
    int main()
    {

    }

    // [Type] syntax node ERROR: Type 'intttt' used before declaration // pass
    // [Type] syntax node ERROR: Type 'charr' used before declaration // pass
    // [FormalParameterSingle] syntax node ERROR: Name 'parameter5' already defined in the current scope // pass
    // [FormalParameterArray] syntax node ERROR: Name 'parameter5' already defined in the current scope // pass
    int method1(intttt parameter1, int parameter2, char parameter4[], charr parameter5[], bool parameter5, int parameter5[])
        // ERROR 17:15:47,745 - [TypeIdent] Nije pronadjen tip intttt u tabeli simbola na liniji 149
        intttt localVariable1, localvariable2;
        char localVariable3, localVariable4[];
    {
        // ERROR 17:15:47,745 - [MethodDecl] U metodu(method1) povratnog tipa koji nije void se mora pojaviti barem jedna return naredba koja vraca vrednost
    }

    // [VariableSingle] syntax node ERROR: Invalid type when defining variable 'var1' // pass
    // [VariableSingle] syntax node ERROR: Invalid type when defining variable 'var2' // pass
    int validMethod1()
        int int;
        bool char;
        int var1;
        char var2;
    {
        // ERROR 17:15:47,745 - [MethodDecl] U metodu(validMethod1) povratnog tipa koji nije void se mora pojaviti barem jedna return naredba koja vraca vrednost
    }

    int validMethod2()
        int localVariable1;
        Class1 obj1, obj2;
        set set1, set2;
        int arr1[], arr2[];
    {
        // [TermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be of type 'int' // pass
        // [TermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be of type 'int' // pass
        // [TermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be of type 'int' // pass
        // ERROR 19:49:33,486 - [DesignatorAssignExpr] Tip Expr nije kompatibilan sa tipom neterminala Designator : localVariable1 na liniji 174
        localVariable1 = 'c' * 5 / 2 % 4;

        // [TermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be of type 'int' // pass
        // [TermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be of type 'int' // pass
        // ERROR 19:49:33,487 - [DesignatorAssignExpr] Tip Expr nije kompatibilan sa tipom neterminala Designator : localVariable1 na liniji 178 // pass
        localVariable1 = 5 * 2 * false * 4;

        // [ExprAddopMinusTerm] syntax node ERROR: Only terms of 'int' type can be negated // pass
        localVariable1 = -false;

        // [ExprAddopMinusTerm] syntax node ERROR: Only terms of 'int' type can be negated // pass
        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be of type 'int' // pass
        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be of type 'int' // pass
        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be of type 'int' // pass
        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be of type 'int' // pass
        localVariable1 = -'a' + 5 - 6 + 4 - false;

        // [CondFactExprRelopExpr] syntax node ERROR: Expressions of a relational operation must be compatible // pass
        // [StatementIf] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (5 > 'c')
            localVariable1 = 10;

        // [CondFactExprRelopExpr] syntax node ERROR: Expressions of a relational operation must be compatible // pass
        // [StatementIf] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (false == 'f')
            localVariable1 = 20;

        obj1 = new Class1();
        obj2 = new Class1();
        set1 = new set[5];
        set2 = new set[10];

        // [CondFactExprRelopExpr] syntax node ERROR: Relational operations on reference types (Class, Array, Set) must be equality operations // pass
        // [CondTermCondFact] syntax node ERROR: CondFact type is not defined // pass
        // [ConditionCondTerm] syntax node ERROR: CondTerm type is not defined // pass
        // [StatementIf] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (obj1 < obj2)
            localVariable1 = 25;

        // [CondFactExprRelopExpr] syntax node ERROR: Relational operations on reference types (Class, Array, Set) must be equality operations // pass
        // [CondTermCondFact] syntax node ERROR: CondFact type is not defined // pass
        // [ConditionCondTerm] syntax node ERROR: CondTerm type is not defined // pass
        // [StatementIf] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (arr1 < arr2)
            localVariable1 = 26;

        // [CondFactExprRelopExpr] syntax node ERROR: Relational operations on reference types (Class, Array, Set) must be equality operations // pass
        // [CondTermCondFact] syntax node ERROR: CondFact type is not defined // pass
        // [ConditionCondTerm] syntax node ERROR: CondTerm type is not defined // pass
        // [StatementIf] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (set1 > set2)
            localVariable1 = 26;

        // [CondTermCondFactAndCondFact] syntax node ERROR: Both CondFacts in a logical and operation (&&) must be of type 'bool' // pass
        // [StatementIf] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (5 < 10 && 10)
            localVariable1 = 30;

        // [ConditionCondTermOrCondTerm] syntax node ERROR: Both CondTerms in a logical or operation (||) must be of type 'bool' // pass
        // [StatementIf] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (5 < 10 && true == true || 10)
            localVariable1 = 40;

        // [StatementIfElse] syntax node ERROR: Condition of an 'if' statement must be of type 'bool' // pass
        if (5)
        {
            localVariable1 = 50;
        }
        else
        {
            localVariable1 = 60;
        }

        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be of type 'int' // pass
        // [FactorExpr] syntax node ERROR: Expr type is not defined // pass
        // [TermFactor] syntax node ERROR: Factor type is not defined // pass
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        localVariable1 = (6 + false);
    }

    int validMethod3()
    {
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(int);

        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(char);

        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(bool);

        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(set);

        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(Class1);

        // [StatementPrintWithParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(int, 2);

        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(validMethod2);

        // [DesignatorIdentificator] syntax node ERROR: Name 'InvalidProgramName' is not a valid designator identificator // pass
        // [FactorDesignator] syntax node ERROR: Some of the designator's identificators are invalid
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(InvalidProgramName);
    }

    int validMethod4()
        int var1;
    {
        // [TermTermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be values of type 'int' // pass
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(var1 * int);

        // [TermTermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be values of type 'int' // pass
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(int / var1);

        // [TermTermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be values of type 'int' // pass
        // [ExprTerm] syntax node ERROR: Term type is not defined
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(validMethod2 * validMethod3);

        // [TermTermMulopFactor] syntax node ERROR: Both factors of a multiplication operation must be values of type 'int' // pass
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(Class1 % validMethod1);
    }

    int validMethod5()
        int var1;
    {
        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be values of type 'int' // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(var1 + int);

        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be values of type 'int' // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(int - var1);

        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be values of type 'int' // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(validMethod2 + validMethod3);

        // [ExprExprAddopTerm] syntax node ERROR: Both terms of an addition operation must be values of type 'int' // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(Class1 - validMethod1);

        // [ExprAddopMinusTerm] syntax node ERROR: Only terms of 'int' type can be negated // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(-int);

        // [ExprAddopMinusTerm] syntax node ERROR: Only terms of 'int' type can be negated // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(-validMethod2);

        // [ExprAddopMinusTerm] syntax node ERROR: Only terms of 'int' type can be negated // pass
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(-Class1);
    }

    int validMethod6()
        int arr1[];
    {
        // [Type] syntax node ERROR: Type 'intt' used before declaration
        // [FactorCollectionInstantiation] syntax node ERROR: Invalid type when instantiating a collection
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        arr1 = new intt[5];

        // [FactorCollectionInstantiation] syntax node ERROR: Collection size expression must be an integer
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined
        arr1 = new int[true];

        // [FactorCollectionInstantiation] syntax node ERROR: Collection size expression must be an integer // pass
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        arr1 = new int[int];

        // [FactorCollectionInstantiation] syntax node ERROR: Collection size expression must be an integer // pass
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        arr1 = new int[validMethod5];

        // [FactorCollectionInstantiation] syntax node ERROR: Collection size expression must be an integer // pass
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined // pass
        arr1 = new int[Class1];
    }

    int validMethod7()
        int var1, arr1[];
    {
        // [DesignatorArrayAccess] syntax node ERROR: Array designator identificator must be an array variable // pass
        // [FactorDesignator] syntax node ERROR: Some of the designator's identificators are invalid
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(var1[5]);

        // [DesignatorArrayAccess] syntax node ERROR: Array designator identificator must be an array variable // pass
        // [FactorDesignator] syntax node ERROR: Some of the designator's identificators are invalid
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined
        // [StatementPrintWithoutParameter] syntax node ERROR: Print statement can only print values of 'int', 'char', 'bool' or 'set' types // pass
        print(var2[10]);

        // [DesignatorArrayAccess] syntax node ERROR: Array designator identificator must be an array variable // pass
        validMethod6[4] = 2;

        // [DesignatorArrayAccess] syntax node ERROR: Array index expression must be an integer // pass
        arr1[true] = 5;

        // [DesignatorArrayAccess] syntax node ERROR: Array index expression must be an integer // pass
        arr1[int] = 10;

        // [DesignatorArrayAccess] syntax node ERROR: Array index expression must be an integer // pass
        arr1[validMethod5] = 15;

        // [DesignatorIdentificator] syntax node ERROR: Name 'gfsafs' not found in the symbols table // pass
        // [DesignatorArrayAccess] syntax node ERROR: Array designator identificator must be an array variable // pass
        gfsafs[5] = 12;
    }

    int validMethod8()
        Class1 obj1;
    {
        // [Type] syntax node ERROR: Type 'InvalidType' used before declaration
        // [FactorObjectInstantiation] syntax node ERROR: Invalid type when instantiating an object
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined
        obj1 = new InvalidType();

        milance = 3;

        // [Type] syntax node ERROR: Type 'InvalidType' used before declaration
        // [FactorObjectInstantiation] syntax node ERROR: Type 'int' is not a class
        // [TermFactor] syntax node ERROR: Factor type is not defined
        // [ExprTerm] syntax node ERROR: Term type is not defined
        obj1 = new int();
    }

    int validMethod9()
        set set1;
        int arr1[];
        Class1 obj1;
    {
        // [StatementRead] syntax node ERROR: Designator in a read statement must be modifiable (variable, class attribute or array element)
        read(constant4);

        // [StatementRead] syntax node ERROR: Designator in a read statement must be modifiable (variable, class attribute or array element)
        read(Class1);

        // [StatementRead] syntax node ERROR: Designator in a read statement must be modifiable (variable, class attribute or array element)
        read(validMethod1);

        // [DesignatorIdentificator] syntax node ERROR: Name 'InvalidProgramName' is not a valid designator identificator
        // [StatementRead] syntax node ERROR: Read statement can only read values of 'int', 'char' or 'bool' types
        read(InvalidProgramName);

        // [StatementRead] syntax node ERROR: Read statement can only read values of 'int', 'char' or 'bool' types
        read(set1);

        // [StatementRead] syntax node ERROR: Read statement can only read values of 'int', 'char' or 'bool' types
        read(arr1);

        // [StatementRead] syntax node ERROR: Read statement can only read values of 'int', 'char' or 'bool' types
        read(obj1);
    }

    bool validMethod10(int param1) { }

    int validMethod11(int param1, int param2) { }

    int validMethod12(char param1) { }

    int validMethod13(int param1) { }

    int validMethod14()
        int var1;
        int arr1[];
        char arr2[];
    {
        arr1 = new int[1];
        arr1[0] = 5;

        // [ExprDesignatorMapDesignator] syntax node ERROR: Left designator in a mapping operation must be a function with this signature: int func(int param)
        var1 = var1 map arr1;

        // [ExprDesignatorMapDesignator] syntax node ERROR: Left designator in a mapping operation must be a function with this signature: int func(int param)
        var1 = validMethod10 map arr1;

        // [ExprDesignatorMapDesignator] syntax node ERROR: Left designator in a mapping operation must be a function with this signature: int func(int param)
        var1 = validMethod11 map arr1;

        // [ExprDesignatorMapDesignator] syntax node ERROR: Left designator in a mapping operation must be a function with this signature: int func(char param)
        var1 = validMethod12 map arr1;

        // [ExprDesignatorMapDesignator] syntax node ERROR: Right designator in a mapping operation must be an array of integers
        var1 = validMethod13 map int;

        // [ExprDesignatorMapDesignator] syntax node ERROR: Right designator in a mapping operation must be an array of integers
        var1 = validMethod13 map arr2;
    }

    int validMethod15(int param1, int param2)
        set set1, set2;
        Interface1 obj1;
        Interface2 obj2;
        Interface3 obj3;
        Class8 obj4;
        Class9 obj5;
        Class10 obj6;
        Class11 obj7;
        Class12 obj8;
        Class13 obj9;
    {
        // [DesignatorIdentificator] syntax node ERROR: Name 'sgaafag' not found in the symbols table
        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator is invalid
        sgaafag = new set[5];

        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator in an assignment statement must be modifiable (variable, class attribute or array element)
        validMethod14 = 15;

        // [DesignatorStatementAssignopExpr] syntax node ERROR: Expression is not assignable to the designator
        set2 = 'c';

        // [DesignatorStatementAssignopExpr] syntax node ERROR: Expression is not assignable to the designator
        obj1 = obj5;

        // [DesignatorStatementAssignopExpr] syntax node ERROR: Expression is not assignable to the designator
        obj2 = obj4;

        // [DesignatorStatementAssignopExpr] syntax node ERROR: Expression is not assignable to the designator
        obj3 = obj4;

        // [DesignatorStatementAssignopExpr] syntax node ERROR: Expression is not assignable to the designator
        obj9 = obj8;
    }

    int validMethod16()
        int var1;
        char var2;
        set set1, set2;
    {
        // [DesignatorIdentificator] syntax node ERROR: Name 'sffsaf' not found in the symbols table
        // [DesignatorStatementIncrement] syntax node ERROR: Designator is invalid
        sffsaf++;

        // [DesignatorIdentificator] syntax node ERROR: Name 'geqgq' not found in the symbols table
        // [DesignatorStatementDecrement] syntax node ERROR: Designator is invalid
        geqgq--;

        // [DesignatorStatementIncrement] syntax node ERROR: Designator in an increment statement must be modifiable (variable, class attribute or array element)
        validMethod15++;

        // [DesignatorStatementDecrement] syntax node ERROR: Designator in a decrement statement must be modifiable (variable, class attribute or array element)
        int--;

        // [DesignatorStatementIncrement] syntax node ERROR: Increment statement can only be applied to integer designators
        var2++;

        // [DesignatorStatementDecrement] syntax node ERROR: Decrement statement can only be applied to integer designators
        var2--;

        // [DesignatorStatementSetop] syntax node ERROR: All designators in a union operation must be of type 'set'
        var1 = set1 union set2;
    }

    // [MethodDecl] syntax node ERROR: Method 'validMethod17' must have a return statement
    int validMethod17()
        int var1;
    {
        // [StatementReturnWithoutExpr] syntax node ERROR: Return statement without expression can only be used in methods with 'void' return type
        return;
    }

    void validMethod18()
    {
        // [StatementReturnWithExpr] syntax node ERROR: Return statement expression type does not match method return type
        return 2;
    }

    void validMethod19()
        int var1;
    {
        var1 = 0;
        // [StatementDoWhileWithCondition] syntax node ERROR: Condition of a 'do-while' statement must be of type 'bool'
        do {} while (1);

        // [StatementDoWhileConditionAndDesignatorStatement] syntax node ERROR: Condition of a 'do-while' statement must be of type 'bool'
        do {} while ('c', var1++);

        // [StatementBreak] syntax node ERROR: Break statement can only be used inside of a loop
        break;

        // [StatementContinue] syntax node ERROR: Continue statement can only be used inside of a loop
        continue;
    }

    void validMethod20()
        int var1;
        Class13 obj1;
        Interface1 obj2;
    {
        // [DesignatorIdentificator] syntax node ERROR: Name 'fsafas' not found in the symbols table
        // [DesignatorClassAccess] syntax node ERROR: Designator identificator is invalid
        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator is invalid
        fsafas.attr1 = 5;

        // [DesignatorClassAccess] syntax node ERROR: Designator identificator must be a variable, class attribute or array element to be accessed
        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator is invalid
        validMethod19.attr1 = 10;

        // [DesignatorClassAccess] syntax node ERROR: Designator identificator must be a variable, class attribute or array element to be accessed
        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator is invalid
        int.attr1 = 15;

        // [DesignatorClassAccess] syntax node ERROR: Class designator identificator must be an object
        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator is invalid
        var1.attr1 = 20;

        obj1 = new Class13();

        // [DesignatorClassAccess] Class member 'attr2' is not defined in the 'obj1' object
        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator is invalid
        obj1.attr2 = 25;

        // [DesignatorStatementAssignopExpr] syntax node ERROR: Expression is not assignable to the designator
        obj1.obj12 = 20;

        // [DesignatorClassAccess] Class member 'attr12' is not defined in the 'obj12' object
        // [DesignatorStatementAssignopExpr] syntax node ERROR: Designator is invalid
        obj1.obj12.attr12 = 30;

        // [DesignatorUserTypeAccess] Interface method 'interface1_methofsa' is not defined in the 'obj2' interface
        obj2 = new Class8();
        obj2.interface1_methofsa();

        // [DesignatorUserTypeAccess] syntax node ERROR: Designator identificator must be a variable, class attribute or array element to be accessed
        obj2.interface1_method1.fafas();
    }
}